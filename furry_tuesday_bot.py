import logging
import os
import asyncio
from user_storage import *
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiohttp import ClientSession, BasicAuth

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ö–ª—é—á–∏
TOKEN = os.getenv("TOKEN")
E621_USERNAME = os.getenv("E621_USERNAME")
E621_API_KEY = os.getenv("E621_API_KEY")
USER_AGENT = 'FurryTuesdayBot/1.0 (by @me)'

# –ò–Ω–∏–∏—Ü–∏–∞–ª–∏—â–∞—Ü–∏—è
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîû –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")],
        [KeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ 
period_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="ü•â –ó–∞ –¥–µ–Ω—å")],
        [KeyboardButton(text="ü•à –ó–∞ –Ω–µ–¥–µ–ª—é")],
        [KeyboardButton(text="ü•á –ó–∞ –º–µ—Å—è—Ü")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥"
)


# === ASYNC –§–£–ù–ö–¶–ò–ò === 


# –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å e621
async def get_most_image_data():
    url = 'https://e621.net/posts.json'
    headers = {
        'User-Agent': USER_AGENT
    }
    params = {
        'limit': 1,
        'tags': 'order:score date:day'
    }

    async with ClientSession() as session:
        try:
            async with session.get(
                url,
                headers=headers,
                params=params,
                auth=BasicAuth(E621_USERNAME, E621_API_KEY)) as resp:
                
                if resp.status == 200:
                    data = await resp.json()
                    return data
                else:
                    logging.error(f"Error fetching data: {resp.status}")
        except Exception as e:
            logging.error(f"Request failed: {e}")
    return None

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
async def send_image(chat_id: int, period: str = "day"):
    url = 'https://e621.net/posts.json'
    headers = {
        'User-Agent': USER_AGENT
    }
    params = {
        'limit': 1,
        'tags': f"order:score date:{period}"
    }

    async with ClientSession() as session:
        try:
            async with session.get(
                url,
                headers=headers,
                params=params,
                auth=BasicAuth(E621_USERNAME, E621_API_KEY)) as resp:

                if resp.status == 200:
                    data = await resp.json()
                    if data and data.get("posts"):
                        post = data["posts"][0]
                        image_url = post["sample"]["url"]
                        post_url = f"https://e621.net/posts/{post['id']}"

                        await bot.send_photo(chat_id, image_url, caption=post_url)
                        logging.info(f"‚úÖ Sent image to {chat_id}")
                    else:
                        await bot.send_message(chat_id, "üòû –ö–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                else:
                    logging.error(f"‚ùå Error fetching data: {resp.status}")
        except Exception as e:
            logging.error(f"‚ùå Failed to send image to {chat_id}: {e}")



async def send_image_toeveryone(period="day"):
    users = load_users()

    for user_id in users:
        try:
            await send_image(user_id, period=period)
        except Exception as e:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é 
async def scheduler():
    while True:
        await asyncio.sleep(3600)  # –∫–∞–∂–¥—ã–π —á–∞—Å
        await send_image_toeveryone(period="day")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)


# === –ö–û–ú–ê–ù–î–´ ===


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def start_handler(message: Message):
    chat_id = message.chat.id
    print(f"‚ñ∂Ô∏è /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    add_user(chat_id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∞–º—É—é –ø–æ–ø—É–ª—è—Ä–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Å e621. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"
@router.message()
async def handle_buttons(message: Message):
    chat_id = message.chat.id
    text = message.text

    text = message.text

    match text:
        case "üîû –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É":
            await message.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=period_menu)

        case "ü•â –ó–∞ –¥–µ–Ω—å":
            await send_image(chat_id, period="day")

        case "ü•à –ó–∞ –Ω–µ–¥–µ–ª—é":
            await send_image(chat_id, period="week")

        case "ü•á –ó–∞ –º–µ—Å—è—Ü":
            await send_image(chat_id, period="month")

        case "üîô –ù–∞–∑–∞–¥":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

        case "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è":
            from user_storage import remove_user
            remove_user(chat_id)
            await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ üì¥", reply_markup=ReplyKeyboardRemove())

        case _:
            await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π –ö–ù–û–ü–ö–ò, –¥—É—Ä–µ–Ω—å >:T")


# === –ó–ê–ü–£–°–ö ===


if __name__ == "__main__":
    asyncio.run(main())